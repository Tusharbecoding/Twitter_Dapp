{"ast":null,"code":"var _jsxFileName = \"D:\\\\Twitter Dapp\\\\Twitter-Starter\\\\src\\\\pages\\\\Settings.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport './Settings.css';\nimport { Input } from \"web3uikit\";\nimport pfp1 from \"../images/pfp1.png\";\nimport pfp2 from \"../images/pfp2.png\";\nimport pfp3 from \"../images/pfp3.png\";\nimport pfp4 from \"../images/pfp4.png\";\nimport pfp5 from \"../images/pfp5.png\";\nimport { useState, useRef, useEffect } from \"react\";\nimport { defaultImgs } from \"../defaultimgs\";\nimport { useMoralis, useMoralisWeb3Api } from \"react-moralis\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Settings = () => {\n  _s();\n\n  const [pfps, setPfps] = useState([]);\n  const [selectedPFP, setSelectedPFP] = useState();\n  const inputFile = useRef(null);\n  const [selectedFile, setSelectedFile] = useState(defaultImgs[1]);\n  const [theFile, setTheFile] = useState();\n  const [username, setUsername] = useState();\n  const [bio, setBio] = useState();\n  const {\n    Moralis,\n    isAuthenticated,\n    account\n  } = useMoralis();\n  const Web3Api = useMoralisWeb3Api();\n\n  const resolveLink = url => {\n    if (!url || !url, includes(\"ipfs://\")) return url;\n    return url.replace(\"ipfs://\", \"https://gateway.ipfs.io/ipfs/\");\n  };\n\n  useEffect(() => {\n    const fetchNFTs = async () => {\n      const options = {\n        chain: \"mumbai\",\n        address: account\n      };\n      const mumbaiNFTS = await Web3Api.account.getNFTs(options);\n      const images = mumbaiNFTs.result.map(e => {\n        var _JSON$parsi;\n\n        return resolveLink((_JSON$parsi = JSON.parsi(e.metadata)) === null || _JSON$parsi === void 0 ? void 0 : _JSON$parsi.image);\n      });\n      setPfps(images);\n    };\n\n    fetchNFTs();\n  }, [isAuthenticated, account]);\n\n  const onBannerClick = () => {\n    inputFile.current.click();\n  };\n\n  const changeHandler = event => {\n    const img = event.target.files[0];\n    setTheFile(img);\n    setSelectedFile(URL.createObjectURL(img));\n  };\n\n  const saveEdits = async () => {\n    const User = Moralis.Object.extend(\"_User\");\n    const query = new Moralis.Query(User);\n    const myDetails = await query.first();\n\n    if (bio) {\n      myDetails.set(\"bio\", bio);\n    }\n\n    if (username) {\n      myDetails.set(\"username\", username);\n    }\n\n    if (theFile) {\n      const data = theFile;\n      const file = new Moralis.File(data.name, data);\n      await file.saveIPFS();\n      myDetails.set(\"banner\", file.ipfs());\n    }\n\n    await myDetails.save();\n    window.location.reload();\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pageIdentify\",\n      children: \"Settings\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"settingsPage\",\n      children: [/*#__PURE__*/_jsxDEV(Input, {\n        label: \"Name\",\n        name: \"NameChange\",\n        width: \"100%\",\n        labelBgColor: \"#141d26\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Input, {\n        label: \"Bio\",\n        name: \"bioChange\",\n        width: \"100%\",\n        labelBgColor: \"#141d26\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"pfp\",\n        children: [\"Profile Image (Your NFTs)\", /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"pfpOptions\",\n          children: pfps.map((e, i) => {\n            return /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                src: e,\n                className: selectedPFP === e ? \"pfpOptionSelected\" : \"pfpOption\",\n                onClick: () => {\n                  setSelectedPFP(pfps[i]);\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 109,\n                columnNumber: 15\n              }, this)\n            }, void 0, false);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"pfp\",\n        children: [\"Profile Banner\", /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"pfpOptions\",\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: selectedFile,\n            onClick: onBannerClick,\n            className: \"banner\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"file\",\n            name: \"file\",\n            ref: inputFile,\n            onChange: changeHandler,\n            style: {\n              display: \"none\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"save\",\n        onClick: () => saveEdits(),\n        children: \"Save\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Settings, \"gXLaLC2r5zMK4eNciwbwFGjYj30=\", false, function () {\n  return [useMoralis, useMoralisWeb3Api];\n});\n\n_c = Settings;\nexport default Settings; // import React from \"react\";\n// import { Link } from \"react-router-dom\";\n// import './Settings.css';\n// import { Input } from \"web3uikit\";\n// import pfp1 from \"../images/pfp1.png\";\n// import pfp2 from \"../images/pfp2.png\";\n// import pfp3 from \"../images/pfp3.png\";\n// import pfp4 from \"../images/pfp4.png\";\n// import pfp5 from \"../images/pfp5.png\";\n// import { useState, useRef, useEffect } from \"react\"\n// import { defaultImgs } from \"../defaultimgs\"\n// import { useMoralis, useMoralisWeb3Api } from \"react-moralis\";\n// const Settings = () => {\n//   const [pfps, setPfps] = useState([]);\n//   const [selectedPFP, setSelectedPFP] = useState();\n//   const inputFile = useRef(null);\n//   const [selectedFile, setSelectedFile] = useState(defaultImgs[1]);\n//   const [theFile, setTheFile] = useState();\n//   const [username, setUsername] = useState();\n//   const [bio, setBio] = useState();\n//   const { Moralis, isAuthenticated, account } = useMoralis();\n//   const Web3Api = useMoralisWeb3Api();\n//   const resolveLink = (url) => {\n//     if (!url || !url.includes(\"ipfs://\")) return url;\n//     return url.replace(\"ipfs://\", \"https://gateway.ipfs.io/ipfs/\");\n//   };\n//   useEffect(() => {\n//     const fetchNFTs = async () => {\n//       const options = {\n//         chain: \"mumbai\",\n//         address: account\n//       }\n//       const mumbaiNFTs = await Web3Api.account.getNFTs(options);\n//       const images = mumbaiNFTs.result.map(\n//         (e) => resolveLink(JSON.parse(e.metadata)?.image)\n//       );\n//       setPfps(images);\n//     }\n//     fetchNFTs();\n//   },[isAuthenticated, account])\n//   const onBannerClick = () => {\n//     inputFile.current.click();\n//   };\n//   const changeHandler = (event) => {\n//     const img = event.target.files[0];\n//     setTheFile(img);\n//     setSelectedFile(URL.createObjectURL(img));\n//   };\n//   const saveEdits = async () => {\n//     const User = Moralis.Object.extend(\"_User\");\n//     const query = new Moralis.Query(User);\n//     const myDetails = await query.first();\n//     if (bio){\n//       myDetails.set(\"bio\", bio);\n//     }\n//     if (selectedPFP){\n//       myDetails.set(\"pfp\", selectedPFP);\n//     }\n//     if (username){\n//       myDetails.set(\"username\", username);\n//     }\n//     if (theFile) {\n//       const data = theFile;\n//       const file = new Moralis.File(data.name, data);\n//       await file.saveIPFS();\n//       myDetails.set(\"banner\", file.ipfs());\n//     }\n//     await myDetails.save();\n//     window.location.reload();\n//   }\n//   return (\n//     <>\n//       <div className=\"pageIdentify\">Settings</div>\n//       <div className=\"settingsPage\">\n//         <Input\n//           label=\"Name\"\n//           name=\"NameChange\"\n//           width=\"100%\"\n//           labelBgColor=\"#141d26\"\n//           onChange={(e)=> setUsername(e.target.value)}\n//         />\n//         <Input\n//           label=\"Bio\"\n//           name=\"bioChange\"\n//           width=\"100%\"\n//           labelBgColor=\"#141d26\"\n//           onChange={(e)=> setBio(e.target.value)}\n//         />\n//         <div className=\"pfp\">\n//           Profile Image (Your NFTs)\n//           <div className=\"pfpOptions\">\n//             {pfps.map((e,i) => {\n//               return(\n//                 <>\n//                 <img\n//                 src={e}\n//                 className={\n//                   selectedPFP === e ? \"pfpOptionSelected\" : \"pfpOption\"\n//                 }\n//                 onClick={() => {setSelectedPFP(pfps[i]);}}\n//                 ></img>\n//                 </>\n//               )\n//             })}\n//           </div>\n//         </div>\n//         <div className=\"pfp\">\n//           Profile Banner\n//           <div className=\"pfpOptions\">\n//             <img\n//               src={selectedFile}\n//               onClick={onBannerClick}\n//               className=\"banner\"\n//             ></img>\n//             <input\n//               type=\"file\"\n//               name=\"file\"\n//               ref={inputFile}\n//               onChange={changeHandler}\n//               style={{ display: \"none\" }}\n//             />\n//           </div>\n//         </div>\n//         <div className=\"save\" onClick={() => saveEdits()}>\n//           Save\n//         </div>\n//       </div>\n//     </>\n//   );\n// };\n// export default Settings;\n\nvar _c;\n\n$RefreshReg$(_c, \"Settings\");","map":{"version":3,"sources":["D:/Twitter Dapp/Twitter-Starter/src/pages/Settings.js"],"names":["React","Link","Input","pfp1","pfp2","pfp3","pfp4","pfp5","useState","useRef","useEffect","defaultImgs","useMoralis","useMoralisWeb3Api","Settings","pfps","setPfps","selectedPFP","setSelectedPFP","inputFile","selectedFile","setSelectedFile","theFile","setTheFile","username","setUsername","bio","setBio","Moralis","isAuthenticated","account","Web3Api","resolveLink","url","includes","replace","fetchNFTs","options","chain","address","mumbaiNFTS","getNFTs","images","mumbaiNFTs","result","map","e","JSON","parsi","metadata","image","onBannerClick","current","click","changeHandler","event","img","target","files","URL","createObjectURL","saveEdits","User","Object","extend","query","Query","myDetails","first","set","data","file","File","name","saveIPFS","ipfs","save","window","location","reload","i","display"],"mappings":"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":["import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport './Settings.css';\r\nimport { Input } from \"web3uikit\";\r\nimport pfp1 from \"../images/pfp1.png\";\r\nimport pfp2 from \"../images/pfp2.png\";\r\nimport pfp3 from \"../images/pfp3.png\";\r\nimport pfp4 from \"../images/pfp4.png\";\r\nimport pfp5 from \"../images/pfp5.png\";\r\nimport { useState, useRef, useEffect } from \"react\"\r\nimport { defaultImgs } from \"../defaultimgs\"\r\nimport { useMoralis, useMoralisWeb3Api } from \"react-moralis\";\r\n\r\n\r\n\r\nconst Settings = () => {\r\n  \r\n  const [pfps, setPfps] = useState([]) \r\n  const [selectedPFP, setSelectedPFP] = useState();\r\n  const inputFile = useRef(null)\r\n  const [selectedFile, setSelectedFile] = useState(defaultImgs[1])\r\n  const [theFile, setTheFile] = useState()\r\n  const [username, setUsername] = useState()\r\n  const [bio, setBio] = useState()\r\n  const { Moralis, isAuthenticated, account } = useMoralis();\r\n  const Web3Api = useMoralisWeb3Api();\r\n\r\n\r\n  const resolveLink = (url) => {\r\n    if (!url || !url,includes(\"ipfs://\")) return url; \r\n    return url.replace(\"ipfs://\", \"https://gateway.ipfs.io/ipfs/\")\r\n  }\r\n\r\n  useEffect(()=>{\r\n    \r\n    const fetchNFTs = async () => {\r\n      const options = {\r\n        chain: \"mumbai\",\r\n        address: account\r\n      }\r\n\r\n      const mumbaiNFTS = await Web3Api.account.getNFTs(options)\r\n      const images = mumbaiNFTs.result.map(\r\n      (e) => resolveLink(JSON.parsi(e.metadata)?.image)\r\n      )\r\n      setPfps(images)\r\n    }\r\n    fetchNFTs()\r\n  }, [isAuthenticated, account])\r\n\r\n  const onBannerClick = () =>{\r\n    inputFile.current.click()\r\n  }\r\n\r\n  const changeHandler = (event) => {\r\n    const img = event.target.files[0];\r\n    setTheFile(img)\r\n    setSelectedFile(URL.createObjectURL(img))\r\n  }\r\n\r\n  const saveEdits = async () => {\r\n    const User = Moralis.Object.extend(\"_User\")\r\n    const query = new Moralis.Query(User);\r\n    const myDetails = await query.first();\r\n\r\n    if (bio) {\r\n      myDetails.set(\"bio\", bio)\r\n    }\r\n\r\n    if (username) {\r\n      myDetails.set(\"username\", username)\r\n    }\r\n\r\n    if (theFile) {\r\n      const data = theFile;\r\n      const file = new Moralis.File(data.name, data)\r\n      await file.saveIPFS()\r\n      myDetails.set(\"banner\", file.ipfs())\r\n    }\r\n\r\n    await myDetails.save()\r\n    window.location.reload()\r\n  }\r\n\r\n  return (\r\n    <>\r\n    <div className=\"pageIdentify\">Settings</div>\r\n    <div className=\"settingsPage\">\r\n      <Input \r\n        label=\"Name\"\r\n        name=\"NameChange\"\r\n        width=\"100%\"\r\n        labelBgColor=\"#141d26\"\r\n      />\r\n      <Input \r\n        label=\"Bio\"\r\n        name=\"bioChange\"\r\n        width=\"100%\"\r\n        labelBgColor=\"#141d26\"\r\n      />\r\n\r\n      <div className=\"pfp\">\r\n        Profile Image (Your NFTs)\r\n\r\n        <div className=\"pfpOptions\">\r\n          {pfps.map((e, i) => {\r\n            return (\r\n              <>\r\n              <img src={e} className={selectedPFP === e ? \"pfpOptionSelected\" : \"pfpOption\"} onClick={()=>{setSelectedPFP(pfps[i])}} />\r\n              </>\r\n            )\r\n          })}\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"pfp\">\r\n          Profile Banner\r\n          <div className=\"pfpOptions\">\r\n            <img\r\n              src={selectedFile}\r\n              onClick={onBannerClick}\r\n              className=\"banner\"></img>\r\n              <input type=\"file\"\r\n                name=\"file\"\r\n                ref={inputFile}\r\n                onChange={changeHandler}\r\n                style={{ display: \"none\"}} />\r\n          </div>\r\n      </div>\r\n      <div className=\"save\" onClick={()=>saveEdits()}>\r\n          Save\r\n      </div>\r\n    </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Settings;\r\n\r\n// import React from \"react\";\r\n// import { Link } from \"react-router-dom\";\r\n// import './Settings.css';\r\n// import { Input } from \"web3uikit\";\r\n// import pfp1 from \"../images/pfp1.png\";\r\n// import pfp2 from \"../images/pfp2.png\";\r\n// import pfp3 from \"../images/pfp3.png\";\r\n// import pfp4 from \"../images/pfp4.png\";\r\n// import pfp5 from \"../images/pfp5.png\";\r\n// import { useState, useRef, useEffect } from \"react\"\r\n// import { defaultImgs } from \"../defaultimgs\"\r\n// import { useMoralis, useMoralisWeb3Api } from \"react-moralis\";\r\n\r\n// const Settings = () => {\r\n\r\n//   const [pfps, setPfps] = useState([]);\r\n//   const [selectedPFP, setSelectedPFP] = useState();\r\n//   const inputFile = useRef(null);\r\n//   const [selectedFile, setSelectedFile] = useState(defaultImgs[1]);\r\n//   const [theFile, setTheFile] = useState();\r\n//   const [username, setUsername] = useState();\r\n//   const [bio, setBio] = useState();\r\n//   const { Moralis, isAuthenticated, account } = useMoralis();\r\n//   const Web3Api = useMoralisWeb3Api();\r\n\r\n\r\n//   const resolveLink = (url) => {\r\n//     if (!url || !url.includes(\"ipfs://\")) return url;\r\n//     return url.replace(\"ipfs://\", \"https://gateway.ipfs.io/ipfs/\");\r\n//   };\r\n\r\n//   useEffect(() => {\r\n\r\n//     const fetchNFTs = async () => {\r\n//       const options = {\r\n//         chain: \"mumbai\",\r\n//         address: account\r\n//       }\r\n\r\n//       const mumbaiNFTs = await Web3Api.account.getNFTs(options);\r\n//       const images = mumbaiNFTs.result.map(\r\n//         (e) => resolveLink(JSON.parse(e.metadata)?.image)\r\n//       );\r\n//       setPfps(images);\r\n//     }\r\n\r\n//     fetchNFTs();\r\n\r\n//   },[isAuthenticated, account])\r\n\r\n//   const onBannerClick = () => {\r\n//     inputFile.current.click();\r\n//   };\r\n\r\n//   const changeHandler = (event) => {\r\n    \r\n//     const img = event.target.files[0];\r\n//     setTheFile(img);\r\n//     setSelectedFile(URL.createObjectURL(img));\r\n//   };\r\n\r\n//   const saveEdits = async () => {\r\n//     const User = Moralis.Object.extend(\"_User\");\r\n//     const query = new Moralis.Query(User);\r\n//     const myDetails = await query.first();\r\n\r\n//     if (bio){\r\n//       myDetails.set(\"bio\", bio);\r\n//     }\r\n\r\n//     if (selectedPFP){\r\n//       myDetails.set(\"pfp\", selectedPFP);\r\n//     }\r\n\r\n//     if (username){\r\n//       myDetails.set(\"username\", username);\r\n//     }\r\n\r\n//     if (theFile) {\r\n//       const data = theFile;\r\n//       const file = new Moralis.File(data.name, data);\r\n//       await file.saveIPFS();\r\n//       myDetails.set(\"banner\", file.ipfs());\r\n//     }\r\n\r\n//     await myDetails.save();\r\n//     window.location.reload();\r\n//   }\r\n\r\n//   return (\r\n//     <>\r\n//       <div className=\"pageIdentify\">Settings</div>\r\n//       <div className=\"settingsPage\">\r\n//         <Input\r\n//           label=\"Name\"\r\n//           name=\"NameChange\"\r\n//           width=\"100%\"\r\n//           labelBgColor=\"#141d26\"\r\n//           onChange={(e)=> setUsername(e.target.value)}\r\n//         />\r\n\r\n//         <Input\r\n//           label=\"Bio\"\r\n//           name=\"bioChange\"\r\n//           width=\"100%\"\r\n//           labelBgColor=\"#141d26\"\r\n//           onChange={(e)=> setBio(e.target.value)}\r\n//         />\r\n\r\n//         <div className=\"pfp\">\r\n//           Profile Image (Your NFTs)\r\n\r\n//           <div className=\"pfpOptions\">\r\n//             {pfps.map((e,i) => {\r\n\r\n//               return(\r\n//                 <>\r\n//                 <img\r\n//                 src={e}\r\n//                 className={\r\n//                   selectedPFP === e ? \"pfpOptionSelected\" : \"pfpOption\"\r\n//                 }\r\n//                 onClick={() => {setSelectedPFP(pfps[i]);}}\r\n//                 ></img>\r\n//                 </>\r\n//               )\r\n//             })}\r\n//           </div>\r\n//         </div>\r\n\r\n//         <div className=\"pfp\">\r\n//           Profile Banner\r\n//           <div className=\"pfpOptions\">\r\n//             <img\r\n//               src={selectedFile}\r\n//               onClick={onBannerClick}\r\n//               className=\"banner\"\r\n//             ></img>\r\n//             <input\r\n//               type=\"file\"\r\n//               name=\"file\"\r\n//               ref={inputFile}\r\n//               onChange={changeHandler}\r\n//               style={{ display: \"none\" }}\r\n//             />\r\n//           </div>\r\n//         </div>\r\n//         <div className=\"save\" onClick={() => saveEdits()}>\r\n//           Save\r\n//         </div>\r\n//       </div>\r\n//     </>\r\n//   );\r\n// };\r\n\r\n// export default Settings;\r\n"]},"metadata":{},"sourceType":"module"}